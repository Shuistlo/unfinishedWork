#GoWestAgent
#
#Makes PacMan go west and when the direction becomes illegal...do something idk wat yet
class GoWestAgent(Agent):
	#you need Directions.WEST
	def getAction(self, state):
		legal = api.legalActions(state)
		if Directions.WEST in legal:
			return api.makeMove(Directions.WEST, legal)
		return api.makeMove(Directions.STOP, legal)
		
		
#HungryAgent
#
#get food use the food location 
class HungryAgent(Agent):
	def getClosestFood(self, state):
		food = food(state) #first get list of available food
		currentPosition = self.whereAmI(state) #get the current position of pacman
		cycle = [(0,1),(1,1),(1,0),(1,-1),(0,-1),(-1,-1),(-1,0),(-1,1)]
		counter = 1 
		closestFood = null
		while(closestFood == null):
			for i in range(len(cycle)):
				for coordinate in cycle:
					potentialFood = currentPosition + coordinate
					if potentialFood in food:
						closestFood = potentialFood
			#multiply values within cycle
			counter++
			cycle = [i * counter for i in cycle]
		return PotentialFood
			
	def getAction(self, state):
		food = getClosestFood(self,state) #location of nearest food
		legal = api.legalActions(state)
		#now we need to figure out a way to get to the food